{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","get","delete","todolistsAPI","title","id","put","todolistId","taskId","model","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","rootReducer","combineReducers","state","filter","todoListId","map","todolist","copyState","todolists","forEach","tl","entityStatus","app","auth","store","createStore","applyMiddleware","thunkMiddleware","useAppSelector","useSelector","window","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","isAxiosError","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById"],"mappings":"6JAuEYA,EAOAC,E,iCChEGC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACT,GAEJ,G,yDDVKQ,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAU,SACbC,GACF,OAAOP,EAASQ,KAAuE,cAAeD,EACzG,EAHQD,EAAU,WAKf,OAAON,EAASS,IAAgE,WACnF,EANQH,EAAU,WAQf,OAAON,EAASU,OAAqB,cACxC,EAGQC,EAAe,WAEpB,OAAOX,EAASS,IAAoB,aACvC,EAHQE,EAAe,SAITC,GACX,OAAOZ,EAASQ,KAA6E,aAAc,CAACI,SAC/G,EANQD,EAAe,SAOTE,GACX,OAAOb,EAASU,OAAT,qBAA4CG,GACtD,EATQF,EAAe,SAUTE,EAAYD,GACvB,OAAOZ,EAASc,IAAT,qBAA2ED,GAAM,CAACD,SAC5F,EAZQD,EAAe,SAafI,GACL,OAAOf,EAASS,IAAT,qBAA6CM,EAA7C,UACV,EAfQJ,EAAe,SAgBbI,EAAoBC,GAC3B,OAAOhB,EAASU,OAAT,qBAA4CK,EAA5C,kBAAgEC,GAC1E,EAlBQL,EAAe,SAmBbI,EAAoBH,GAC3B,OAAOZ,EAASQ,KAAT,qBAAgGO,EAAhG,UAAoH,CAACH,SAC/H,EArBQD,EAAe,SAsBbI,EAAoBC,EAAgBC,GAC3C,OAAOjB,EAASc,IAAT,qBAAiGC,EAAjG,kBAAqHC,GAAUC,EACzI,G,SAwBO5B,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,yBE1EC4B,EAAuB,SAAIX,EAAuBY,GACvDZ,EAAKa,SAASC,OACdF,EAASG,EAAcf,EAAKa,SAAS,KAErCD,EAASG,EAAc,wBAE3BH,EAASI,EAAe,UAC3B,EAEYC,EAA2B,SAACC,EAA4BN,GACjEA,EAASG,EAAcG,EAAMC,QAAUD,EAAMC,QAAU,wBACvDP,EAASI,EAAe,UAC3B,ECVKI,EAAe,CACjBC,YAAY,GAaHC,EAAkB,SAACC,GAAD,MAC1B,CAACC,KAAM,yBAA0BD,QADP,ECdzBH,EAAiC,CACnCK,OAAQ,OACRP,MAAO,KACPQ,eAAe,GAyBNX,EAAgB,SAACG,GAAD,MAA2B,CAACM,KAAM,gBAAiBN,QAAnD,EAChBF,EAAiB,SAACS,GAAD,MAAgC,CAACD,KAAM,iBAAkBC,SAAzD,EC5BxBL,EAA+B,CAAC,EAmFzBO,EAAe,SAAClB,EAAgBmB,EAAwCpB,GAAzD,OACxB,SAACI,EAAyBiB,GACtB,IACMC,EADQD,IACKE,MAAMvB,GAAYwB,MAAK,SAAAC,GAAC,OAAIA,EAAE3B,KAAOG,CAAb,IAC3C,GAAKqB,EAAL,CAMA,IAAMI,EAA6B,aAC/BC,SAAUL,EAAKK,SACfC,YAAaN,EAAKM,YAClBC,SAAUP,EAAKO,SACfC,UAAWR,EAAKQ,UAChBjC,MAAOyB,EAAKzB,MACZoB,OAAQK,EAAKL,QACVG,GAGPxB,EAAwBI,EAAYC,EAAQyB,GACvC/C,MAAK,SAAAoD,GACF,GAA4B,IAAxBA,EAAIvC,KAAKwC,WAAkB,CAC3B,IAAMC,EArEE,SAAChC,EAAgBC,EAAkCF,GAAnD,MAA2E,CACnGgB,KAAM,cACNd,QACAF,aACAC,SAJwB,CAqEOiC,CAAajC,EAAQmB,EAAapB,GACjDI,EAAS6B,EACZ,MACG9B,EAAqB4B,EAAIvC,KAAMY,EAEtC,IACA+B,OAAM,SAACzB,GACJD,EAAyBC,EAAON,EACnC,GAvBJ,MAFGgC,QAAQC,KAAK,8BA0BpB,CAhCuB,ECtFtBzB,EAA0C,G,gBCM1C0B,EAAcC,YAAgB,CAChChB,MFFwB,WAAgF,IAA/EiB,EAA8E,uDAAtD5B,EAAcqB,EAAwC,uCACvG,OAAQA,EAAOjB,MACX,IAAK,cACD,OAAO,2BAAIwB,GAAX,kBAAmBP,EAAOjC,WAAawC,EAAMP,EAAOjC,YAAYyC,QAAO,SAAAhB,GAAC,OAAIA,EAAE3B,KAAOmC,EAAOhC,MAApB,MAC5E,IAAK,WACD,OAAO,2BAAIuC,GAAX,kBAAmBP,EAAOX,KAAKoB,WAA/B,CAA6CT,EAAOX,MAApD,mBAA6DkB,EAAMP,EAAOX,KAAKoB,gBACnF,IAAK,cACD,OAAO,2BACAF,GADP,kBAEKP,EAAOjC,WAAawC,EAAMP,EAAOjC,YAC7B2C,KAAI,SAAAlB,GAAC,OAAIA,EAAE3B,KAAOmC,EAAOhC,OAAhB,2BAA6BwB,GAAMQ,EAAO/B,OAASuB,CAAvD,MAElB,IAAK,eACD,OAAO,2BAAIe,GAAX,kBAAmBP,EAAOW,SAAS9C,GAAK,KAC5C,IAAK,kBACD,IAAM+C,EAAS,eAAOL,GAEtB,cADOK,EAAUZ,EAAOnC,IACjB+C,EACX,IAAK,gBACD,IAAMA,EAAS,eAAOL,GAItB,OAHAP,EAAOa,UAAUC,SAAQ,SAAAC,GACrBH,EAAUG,EAAGlD,IAAM,EACtB,IACM+C,EAEX,IAAK,YACD,OAAO,2BAAIL,GAAX,kBAAmBP,EAAOjC,WAAaiC,EAAOV,QAClD,QACI,OAAOiB,EAElB,EE3BGM,UDN4B,WAAsG,IAArGN,EAAoG,uDAAjE5B,EAAcqB,EAAmD,uCACjI,OAAQA,EAAOjB,MACX,IAAK,kBACD,OAAOwB,EAAMC,QAAO,SAAAO,GAAE,OAAIA,EAAGlD,KAAOmC,EAAOnC,EAArB,IAC1B,IAAK,eACD,MAAM,CAAN,2BAAYmC,EAAOW,UAAnB,IAA6BH,OAAQ,MAAOQ,aAAc,UAA1D,mBAAsET,IAE1E,IAAK,wBACD,OAAOA,EAAMG,KAAI,SAAAK,GAAE,OAAIA,EAAGlD,KAAOmC,EAAOnC,GAAjB,2BAA0BkD,GAA1B,IAA8BnD,MAAOoC,EAAOpC,QAASmD,CAAzD,IACvB,IAAK,yBACD,OAAOR,EAAMG,KAAI,SAAAK,GAAE,OAAIA,EAAGlD,KAAOmC,EAAOnC,GAAjB,2BAA0BkD,GAA1B,IAA8BP,OAAQR,EAAOQ,SAAUO,CAA3D,IACvB,IAAK,gCACD,OAAOR,EAAMG,KAAI,SAAAK,GAAE,OAAIA,EAAGlD,KAAOmC,EAAOnC,GAAjB,2BAA0BkD,GAA1B,IAA8BC,aAAchB,EAAOhB,SAAU+B,CAAjE,IACvB,IAAK,gBACD,OAAOf,EAAOa,UAAUH,KAAI,SAAAK,GAAE,kCAASA,GAAT,IAAaP,OAAQ,MAAOQ,aAAc,QAA1C,IAClC,QACI,OAAOT,EAElB,ECXGU,IHDsB,WAAoF,IAAnFV,EAAkF,uDAAxD5B,EAAcqB,EAA0C,uCACzG,OAAQA,EAAOjB,MACX,IAAK,iBACD,OAAO,2BAAIwB,GAAX,IAAkBvB,OAAQgB,EAAOhB,SACrC,IAAK,gBACD,OAAO,2BAAIuB,GAAX,IAAkB9B,MAAOuB,EAAOvB,QACpC,IAAK,sBACD,OAAO,2BAAI8B,GAAX,IAAkBtB,cAAee,EAAOlB,QAC5C,QACI,OAAO,eAAIyB,GAEtB,EGTGW,KJHuB,WAAoF,IAAnFX,EAAkF,uDAAxD5B,EAAcqB,EAA0C,uCAC1G,MACS,2BADDA,EAAOjB,KAEA,2BAAIwB,GAAX,IAAkB3B,WAAYoB,EAAOlB,QAE9ByB,CAElB,IIDYY,EAAQC,YAAYf,EAAagB,YAAgBC,MAGjDC,EAAyDC,IAItEC,OAAON,MAAQA,E,gECdFO,EAAcC,IAAMC,MAAK,YAA8D,IAAnDC,EAAkD,EAAlDA,QAAkD,IAAzCC,gBAAyC,SAC/F3B,QAAQ4B,IAAI,sBAEZ,MAAwBC,mBAAS,IAAjC,mBAAKpE,EAAL,KAAYqE,EAAZ,KACA,EAAwBD,mBAAwB,MAAhD,mBAAKvD,EAAL,KAAYyD,EAAZ,KAEMC,EAAiB,WACE,KAAjBvE,EAAMwE,QACNP,EAAQjE,GACRqE,EAAS,KAETC,EAAS,oBAEhB,EAeD,OAAO,gCACH,cAACG,EAAA,EAAD,CAAWC,QAAQ,WACRR,SAAUA,EACVrD,QAASA,EACTK,MAAOlB,EACP2E,SAlBS,SAACC,GACrBP,EAASO,EAAEC,cAAc3D,MAC5B,EAiBc4D,WAfW,SAACF,GACT,OAAV/D,GACAyD,EAAS,MAEM,KAAfM,EAAEG,UACFR,GAEP,EAScS,MAAM,QACNC,WAAYpE,IAEvB,cAACqE,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASb,EAAgBL,SAAUA,EAA/D,SACI,cAACmB,EAAA,EAAD,QAGX,I,SC5CYC,GAAevB,IAAMC,MAAK,SAAUuB,GAC7ChD,QAAQ4B,IAAI,uBACZ,MAA8BC,oBAAS,GAAvC,mBAAKoB,EAAL,KAAeC,EAAf,KACA,EAAwBrB,mBAASmB,EAAMrE,OAAvC,mBAAKlB,EAAL,KAAYqE,EAAZ,KAcA,OAAOmB,EACD,cAACf,EAAA,EAAD,CAAWvD,MAAOlB,EAAO2E,SALX,SAACC,GACjBP,EAASO,EAAEC,cAAc3D,MAC5B,EAGqDwE,WAAS,EAACC,OATvC,WACrBF,GAAY,GACZF,EAAMZ,SAAS3E,EAClB,IAOK,sBAAM4F,cAda,WACrBH,GAAY,GACZpB,EAASkB,EAAMrE,MAClB,EAWK,SAAwCqE,EAAMrE,OACvD,I,8BCdY2E,GAAO9B,IAAMC,MAAK,SAACuB,GAC5B,IAAMO,EAAiBC,uBAAY,kBAAMR,EAAMS,WAAWT,EAAM9D,KAAKxB,GAAIsF,EAAMpF,WAA5C,GAAyD,CAACoF,EAAM9D,KAAKxB,GAAIsF,EAAMpF,aAE5G8F,EAAkBF,uBAAY,SAACnB,GACjC,IAAIsB,EAAiBtB,EAAEC,cAAcsB,QACrCZ,EAAMa,iBAAiBb,EAAM9D,KAAKxB,GAAIiG,EAAiBzH,EAAa4H,UAAY5H,EAAa6H,IAAKf,EAAMpF,WAC3G,GAAE,CAACoF,EAAM9D,KAAKxB,GAAIsF,EAAMpF,aAEnBoG,EAAuBR,uBAAY,SAACS,GACtCjB,EAAMkB,gBAAgBlB,EAAM9D,KAAKxB,GAAIuG,EAAUjB,EAAMpF,WACxD,GAAE,CAACoF,EAAM9D,KAAKxB,GAAIsF,EAAMpF,aAEzB,OAAO,sBAAyBuG,UAAWnB,EAAM9D,KAAKL,SAAW3C,EAAa4H,UAAY,UAAY,GAA/F,UACH,cAACM,GAAA,EAAD,CACIR,QAASZ,EAAM9D,KAAKL,SAAW3C,EAAa4H,UAC5ClB,MAAM,UACNR,SAAUsB,IAGd,cAACX,GAAD,CAAcpE,MAAOqE,EAAM9D,KAAKzB,MAAO2E,SAAU4B,IACjD,cAACrB,EAAA,EAAD,CAAYE,QAASU,EAArB,SACI,cAACc,GAAA,EAAD,QATSrB,EAAM9D,KAAKxB,GAY/B,I,YCbY4G,GAAW9C,IAAMC,MAAK,YAAgD,IAAD,IAApC8C,YAAoC,SAAnBvB,EAAmB,kBAC9EhD,QAAQ4B,IAAI,mBAEZ,IAAM5D,EAAWwG,cACjBC,qBAAU,WACN,IAAIF,EAAJ,CAGA,INwBqB3G,EMxBf8G,GNwBe9G,EMxBMoF,EAAMxC,SAAS9C,GNwBE,SAACM,GACjDA,EAASI,EAAe,YACxBZ,EAAsBI,GACjBrB,MAAK,SAACoD,GACH,IAAMR,EAAQQ,EAAIvC,KAAKuH,MACvB3G,EAZc,SAACmB,EAAwBvB,GAAzB,MAAiD,CACvEgB,KAAM,YACNO,QACAvB,aAHsB,CAYLgH,CAAWzF,EAAOvB,IAC3BI,EAASI,EAAe,aAC3B,GACR,GM/BOJ,EAAS0G,EAFR,CAGJ,GAAE,IAEH,IAAMG,EAAUrB,uBAAY,SAAC/F,GACzBuF,EAAM6B,QAAQpH,EAAOuF,EAAMxC,SAAS9C,GACvC,GAAE,CAACsF,EAAM6B,QAAS7B,EAAMxC,SAAS9C,KAK5BoH,EAAsBtB,uBAAY,SAAC/F,GACrCuF,EAAM8B,oBAAoB9B,EAAMxC,SAAS9C,GAAID,EAChD,GAAE,CAACuF,EAAMxC,SAAS9C,GAAIsF,EAAM8B,sBAEvBC,EAAoBvB,uBAAY,kBAAMR,EAAMgC,aAAa,MAAOhC,EAAMxC,SAAS9C,GAA/C,GAAoD,CAACsF,EAAMxC,SAAS9C,GAAIsF,EAAMgC,eAC9GC,EAAuBzB,uBAAY,kBAAMR,EAAMgC,aAAa,SAAUhC,EAAMxC,SAAS9C,GAAlD,GAAuD,CAACsF,EAAMxC,SAAS9C,GAAIsF,EAAMgC,eACpHE,EAA0B1B,uBAAY,kBAAMR,EAAMgC,aAAa,YAAahC,EAAMxC,SAAS9C,GAArD,GAA0D,CAACsF,EAAMxC,SAAS9C,GAAIsF,EAAMgC,eAG5HG,EAAmBnC,EAAM7D,MAS7B,MAP8B,WAA1B6D,EAAMxC,SAASH,SACf8E,EAAmBnC,EAAM7D,MAAMkB,QAAO,SAAAhB,GAAC,OAAIA,EAAER,SAAW3C,EAAa6H,GAA9B,KAEb,cAA1Bf,EAAMxC,SAASH,SACf8E,EAAmBnC,EAAM7D,MAAMkB,QAAO,SAAAhB,GAAC,OAAIA,EAAER,SAAW3C,EAAa4H,SAA9B,KAGpC,gCACH,+BAAI,cAACf,GAAD,CAAcpE,MAAOqE,EAAMxC,SAAS/C,MAAO2E,SAAU0C,IACrD,cAACnC,EAAA,EAAD,CAAYE,QAvBG,WACnBG,EAAMoC,eAAepC,EAAMxC,SAAS9C,GACvC,EAqB4CiE,SAA0C,YAAhCqB,EAAMxC,SAASK,aAA9D,SACI,cAACwD,GAAA,EAAD,SAGR,cAAC9C,EAAD,CAAaG,QAASmD,EAASlD,SAA0C,YAAhCqB,EAAMxC,SAASK,eACxD,8BAEQsE,EAAiB5E,KAAI,SAAAlB,GAAC,OAAI,cAACiE,GAAD,CAAiBpE,KAAMG,EAAGzB,WAAYoF,EAAMxC,SAAS9C,GAC/C+F,WAAYT,EAAMS,WAClBS,gBAAiBlB,EAAMkB,gBACvBL,iBAAkBb,EAAMa,kBAHnBxE,EAAE3B,GAAjB,MAO9B,sBAAK2H,MAAO,CAACC,WAAY,QAAzB,UACI,cAACC,GAAA,EAAD,CAAQpD,QAAmC,QAA1Ba,EAAMxC,SAASH,OAAmB,WAAa,OACxDwC,QAASkC,EACTnC,MAAO,UAFf,iBAKA,cAAC2C,GAAA,EAAD,CAAQpD,QAAmC,WAA1Ba,EAAMxC,SAASH,OAAsB,WAAa,OAC3DwC,QAASoC,EACTrC,MAAO,UAFf,oBAIA,cAAC2C,GAAA,EAAD,CAAQpD,QAAmC,cAA1Ba,EAAMxC,SAASH,OAAyB,WAAa,OAC9DwC,QAASqC,EACTtC,MAAO,YAFf,4BAMX,I,SCtEY4C,GAAqC,SAAC,GAAoB,IAAD,IAAlBjB,YAAkB,SAC5D7D,EAAYU,GAAe,SAAAhB,GAAK,OAAIA,EAAMM,SAAV,IAChCvB,EAAQiC,GAAe,SAAAhB,GAAK,OAAIA,EAAMjB,KAAV,IAC5BV,EAAa2C,GAAe,SAAAhB,GAAK,OAAIA,EAAMW,KAAKtC,UAAf,IACjCT,EAAWwG,cAEjBC,qBAAU,WACN,GAAKhG,EAAL,CAGA,IAAMiG,ENWH,SAAC1G,GACJA,EAASI,EAAe,YACxBZ,IACKjB,MAAK,SAACoD,GACH3B,EARmD,CAACY,KAAM,gBAAiB8B,UAQnDf,EAAIvC,OAC5BY,EAASI,EAAe,aAC3B,GACR,EMjBGJ,EAAS0G,EAFR,CAGJ,GAAE,IAEH,IAAMjB,EAAaD,uBAAY,SAAU9F,EAAYE,GACjD,IAAM8G,EP2Bc,SAAC7G,EAAgBD,GAAjB,OAAwC,SAACI,GACjER,EAAwBI,EAAYC,GAC/BtB,MAAK,SAAAoD,GACF,IAAME,EA3BU,SAAChC,EAAgBD,GAAjB,MAAyC,CAACgB,KAAM,cAAef,SAAQD,aAAvE,CA2BD6H,CAAa5H,EAAQD,GACpCI,EAAS6B,EACZ,GACR,CAN2B,CO3BN6F,CAAahI,EAAIE,GAC/BI,EAAS0G,EACZ,GAAE,IAEGG,EAAUrB,uBAAY,SAAU/F,EAAeG,GACjD,IAAM8G,EP6BW,SAACjH,EAAeG,GAAhB,OAAuC,SAACI,GAC7DA,EAASI,EAAe,YACxBZ,EAAwBI,EAAYH,GAC/BlB,MAAK,SAAAoD,GACF,GAA4B,IAAxBA,EAAIvC,KAAKwC,WAAkB,CAC3B,IACMC,EApCwB,CAACjB,KAAM,WAAYM,KAmCpCS,EAAIvC,KAAKA,KAAKuI,MAE3B3H,EAAS6B,GACT7B,EAASI,EAAe,aAC3B,MACGL,EAAqB4B,EAAIvC,KAAMY,EAEtC,IACA+B,OAAM,SAACzB,GACJD,EAAyBC,EAAON,EACnC,GACR,CAhBwB,CO7BH4H,CAAUnI,EAAOG,GAC/BI,EAAS0G,EACZ,GAAE,IAEGmB,EAAerC,uBAAY,SAAU9F,EAAYmB,EAAsBjB,GACzE,IAAM8G,EAAQ3F,EAAarB,EAAI,CAACmB,UAASjB,GACzCI,EAAS0G,EACZ,GAAE,IAEGR,EAAkBV,uBAAY,SAAU9F,EAAYoI,EAAkBlI,GACxE,IAAM8G,EAAQ3F,EAAarB,EAAI,CAACD,MAAOqI,GAAWlI,GAClDI,EAAS0G,EACZ,GAAE,IAEGM,EAAexB,uBAAY,SAAU7E,EAAyBf,GAChE,IAAMiC,ENzBmE,CAC7EjB,KAAM,yBACNlB,GMuB0CE,ENtB1CyC,OMsBsD1B,GAClDX,EAAS6B,EACZ,GAAE,IAEGuF,EAAiB5B,uBAAY,SAAU9F,GACzC,INVyBE,EMUnB8G,GNVmB9G,EMUMF,ENT5B,SAACM,GAEJA,EAASI,EAAe,YAExBJ,EApBgF,CACpFY,KAAM,gCAAiClB,GAmBGE,EAnBCiB,OAmBW,YAClDrB,EAA4BI,GACvBrB,MAAK,SAACoD,GACH3B,EAnCgB,SAACN,GAAD,MAAiB,CAACkB,KAAM,kBAAmBlB,KAA3C,CAmCPqI,CAAiBnI,IAE1BI,EAASI,EAAe,aAC3B,GACR,GMDGJ,EAAS0G,EACZ,GAAE,IAEGI,EAAsBtB,uBAAY,SAAU9F,EAAYD,GAC1D,IAAMiH,ENSuB,SAAChH,EAAYD,GAC9C,OAAO,SAACO,GACJR,EAA4BE,EAAID,GAC3BlB,MAAK,SAACoD,GACH3B,EArDqB,SAACN,EAAYD,GAAb,MAAgC,CACjEmB,KAAM,wBACNlB,KACAD,QAHiC,CAqDZuI,CAAsBtI,EAAID,GACtC,GACR,CACJ,CMhBqBwI,CAAsBvI,EAAID,GACxCO,EAAS0G,EACZ,GAAE,IAEGwB,EAAc1C,uBAAY,SAAC/F,GAC7B,IAAMiH,ENNe,SAACjH,GAC1B,OAAO,SAACO,GACJA,EAASI,EAAe,YACxBZ,EAA4BC,GACvBlB,MAAK,SAACoD,GACH3B,EA7C0C,CAACY,KAAM,eAAgB4B,SA6C1Cb,EAAIvC,KAAKA,KAAKuI,OACrC3H,EAASI,EAAe,aAC3B,GACR,CACJ,CMHqB+H,CAAc1I,GAC5BO,EAAS0G,EACZ,GAAE,CAAC1G,IAEJ,OAAIS,EAIG,qCACH,cAAC2H,EAAA,EAAD,CAAMC,WAAS,EAAChB,MAAO,CAACiB,QAAS,QAAjC,SACI,cAAC/E,EAAD,CAAaG,QAASwE,MAE1B,cAACE,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQ7F,EAAUH,KAAI,SAAAK,GACV,IAAI4F,EAAmBrH,EAAMyB,EAAGlD,IAEhC,OAAO,cAAC0I,EAAA,EAAD,CAAMT,MAAI,EAAV,SACH,cAACc,EAAA,EAAD,CAAOpB,MAAO,CAACiB,QAAS,QAAxB,SACI,cAAChC,GAAD,CACI9D,SAAUI,EACVzB,MAAOqH,EACP/C,WAAYA,EACZuB,aAAcA,EACdH,QAASA,EACThB,iBAAkBgC,EAClBT,eAAgBA,EAChBlB,gBAAiBA,EACjBY,oBAAqBA,EACrBP,KAAMA,OAZK3D,EAAGlD,GAgB7B,SA5BF,cAAC,KAAD,CAAUgJ,GAAI,UAgC5B,E,gFCxGKC,GAAQnF,IAAMoF,YAAuC,SACvD5D,EAAO6D,GACP,OAAO,cAAC,KAAD,aAAUC,UAAW,EAAGD,IAAKA,EAAK1E,QAAQ,UAAaa,GACjE,IAGM,SAAS+D,KAEZ,IAAMzI,EAAQ+C,aAA6C,SAAAjB,GAAK,OAAIA,EAAMU,IAAIxC,KAAd,IAE1DN,EAAWwG,cAEXwC,EAAc,SAACC,EAAsCC,GACxC,cAAXA,GAGJlJ,EAASG,EAAc,MAC1B,EAED,OACI,cAACgJ,GAAA,EAAD,CAAUC,OAAQ9I,EAAO+I,iBAAkB,IAAMC,QAASN,EAA1D,SACI,cAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAQC,GAAI,CAACC,MAAO,QAA1D,SACKnJ,KAIhB,C,sDCZYoJ,GAAQ,WACjB,IAAM1J,EAAWwG,cACX/F,EAAa2C,GAAe,SAAAhB,GAAK,OAAIA,EAAMW,KAAKtC,UAAf,IAEjCkJ,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAA0B,CAAC,EAWjC,OAVKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAIdI,EAAOH,SAEA,YAAYK,KAAKF,EAAOH,YAChCI,EAAOJ,SAAW,4BAFlBI,EAAOJ,SAAW,WAIfI,CACV,EACDE,SAAU,SAAAH,GXrBK,IAAC9K,EWsBZY,GXtBYZ,EWsBK8K,EXtBN,iDAA2B,WAAOlK,GAAP,wFAC9CA,EAASI,EAAe,YADsB,kBAGxBjB,EAAcC,GAHU,OAId,KADtBuC,EAHoC,QAIlCvC,KAAKwC,YACT5B,EAASU,GAAgB,IACzBV,EAASI,EAAe,eAExBL,EAAqB4B,EAAIvC,KAAMY,GARO,gDAWtClB,IAAMwL,aAAN,OACAjK,EAAyB,EAAD,GAAIL,GAZU,yDAA3B,wDWuBX2J,EAAOY,WACV,IAGL,OAAG9J,EACQ,cAAC,KAAD,CAAUiI,GAAI,MAGlB,cAACN,EAAA,EAAD,CAAMC,WAAS,EAACmC,eAAgB,SAAhC,SACH,cAACpC,EAAA,EAAD,CAAMT,MAAI,EAAC6C,eAAgB,SAA3B,SACI,sBAAMH,SAAUV,EAAOc,aAAvB,SACA,eAACC,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,WACI,yDACI,mBAAGC,KAAM,wCACNC,OAAQ,SADX,sBAIJ,wEACA,0DACA,kDAEJ,eAACC,GAAA,EAAD,WACI,cAAC5G,EAAA,EAAD,aACIO,MAAM,QACNsG,OAAO,UACHpB,EAAOqB,cAAc,WAE5BrB,EAAOsB,QAAQnB,OAASH,EAAOQ,OAAOL,OAAS,qBAAKzC,MAAO,CAACzC,MAAO,OAApB,SAA6B+E,EAAOQ,OAAOL,QAC3F,cAAC5F,EAAA,EAAD,aACItD,KAAK,WACL6D,MAAM,WACNsG,OAAO,UACHpB,EAAOqB,cAAc,cAE5BrB,EAAOsB,QAAQlB,UAAYJ,EAAOQ,OAAOJ,UAAY,qBAAK1C,MAAO,CAACzC,MAAO,OAApB,SAA6B+E,EAAOQ,OAAOJ,WACjG,cAACmB,GAAA,EAAD,CAAkBzG,MAAO,cAAe0G,QAAS,cAAC/E,GAAA,EAAD,aAC7CR,QAAS+D,EAAOO,OAAOF,YACnBL,EAAOqB,cAAc,kBAE7B,cAACzD,GAAA,EAAD,CAAQ3G,KAAM,SAAUuD,QAAS,YAAaS,MAAO,UAArD,8BAQnB,E,UCvBcwG,OAhDf,YAAwC,EAA1B7E,KAA2B,IAC/BvG,EAAWwG,cACX3F,EAASuC,GAAe,SAAChB,GAAD,OAAWA,EAAMU,IAAIjC,MAArB,IACxBC,EAAgBsC,GAAe,SAAAhB,GAAK,OAAIA,EAAMU,IAAIhC,aAAd,IACpCL,EAAa2C,GAAe,SAAAhB,GAAK,OAAIA,EAAMW,KAAKtC,UAAf,IAUvC,OAJAgG,qBAAU,WACNzG,EXGuB,iDAAM,WAAOA,GAAP,wFACjCA,EAASI,EAAe,YADS,kBAGXjB,IAHW,OAID,KADtBwC,EAHuB,QAIrBvC,KAAKwC,YACT5B,EAASU,GAAgB,IACzBV,EAASI,EAAe,eAExBL,EAAqB4B,EAAIvC,KAAMY,GARN,gDAWzBlB,IAAMwL,aAAN,OACAjK,EAAyB,EAAD,GAAIL,GAZH,yBAe7BA,EAjB6C,CAACY,KAAM,sBAAuBD,OAiBjD,IAfG,4EAAN,sDWF1B,GAAE,IAEEG,EAQD,sBAAKqF,UAAU,MAAf,UACI,cAAC4C,GAAD,IACA,eAACsC,GAAA,EAAD,CAAQC,SAAS,SAAjB,UACI,eAACC,GAAA,EAAD,WACI,cAAC5G,EAAA,EAAD,CAAY6G,KAAK,QAAQ5G,MAAM,UAAU,aAAW,OAApD,SACI,cAAC6G,GAAA,EAAD,MAEJ,cAACC,GAAA,EAAD,CAAYvH,QAAQ,KAApB,kBAGC1D,GAAc,cAAC8G,GAAA,EAAD,CAAQ3C,MAAM,UAAUC,QA1BjC,WAClB7E,GZUsB,SAACA,GAC3BA,EAASI,EAAe,YACxBjB,IACKZ,MAAK,SAAAoD,GAC0B,IAAxBA,EAAIvC,KAAKwC,YACT5B,EAASU,GAAgB,IACzBV,EAASI,EAAe,eAExBL,EAAqB4B,EAAIvC,KAAMY,EAEtC,IACA+B,OAAM,SAACzB,GACJD,EAAyBC,EAAON,EACnC,GACR,GYvBI,EAwB8B,wBAEP,YAAXa,GAAwB,cAAC8K,GAAA,EAAD,OAE7B,cAACC,GAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAOC,KAAM,IAAIC,QAAS,cAAC,GAAD,MAC1B,cAAC,KAAD,CAAOD,KAAO,SAASC,QAAS,cAAC,GAAD,MAChC,cAAC,KAAD,CAAOD,KAAK,OAAOC,QAAS,uDAC5B,cAAC,KAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,KAAD,CAAUrD,GAAG,mBA1B3C,qBACHrB,MAAO,CAACiE,SAAU,QAASU,IAAK,MAAOC,UAAW,SAAUxC,MAAO,QADhE,SAEH,cAACyC,GAAA,EAAD,KA6BX,E,SC7DDC,IAASC,OACL,cAAC,KAAD,UACI,cAAC,IAAD,CAAUpJ,MAAOA,EAAjB,SACI,cAAC,GAAD,QAGRqJ,SAASC,eAAe,SAM5BlO,G","file":"static/js/main.15dd968d.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'e7ad35f3-1018-43ff-8616-df879477bca0'\r\n    }\r\n})\r\n\r\n// api\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: string }>>>('/auth/login', data);\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string }>>('/auth/me');\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('/auth/login');\r\n    }\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport axios from 'axios';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => async (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await authAPI.login(data)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (e) {\r\n        if (axios.isAxiosError(e)) {\r\n            handleServerNetworkError(e, dispatch)\r\n        }\r\n    }\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../api/todolists-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\nimport axios from 'axios';\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer';\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setInitializedAC = (value: boolean) => ({type: 'APP/SET-INITIALIZED', value} as const)\r\n\r\nexport const initializeAppTC = () => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (e) {\r\n        if (axios.isAxiosError(e)) {\r\n            handleServerNetworkError(e, dispatch)\r\n        }\r\n    } finally {\r\n        dispatch(setInitializedAC(true))\r\n    }\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppInitializedActionType = ReturnType<typeof setInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetAppInitializedActionType\r\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {TypedUseSelectorHook, useSelector} from 'react-redux';\r\nimport {authReducer} from '../features/Login/auth-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {AppRootStateType, useAppSelector} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useAppSelector(state => state.todolists)\r\n    const tasks = useAppSelector(state => state.tasks)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\nimport {loginTC} from './auth-reducer';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useAppSelector} from '../../app/store';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (!/^\\w{3,}$/i.test(values.password)) {\r\n                errors.password = 'Invalid password address'\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    if(isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                    <FormControlLabel label={'Remember me'} control={<Checkbox\r\n                        checked={formik.values.rememberMe}\r\n                        {...formik.getFieldProps('rememberMe')}\r\n                    />}/>\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                        Login\r\n                    </Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType, useAppSelector} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from '../features/Login/Login';\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {CircularProgress} from '@mui/material'\r\nimport { logoutTC } from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const dispatch = useDispatch()\r\n    const status = useAppSelector((state) => state.app.status)\r\n    const isInitialized = useAppSelector(state => state.app.isInitialized)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const logOutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logOutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path ='/' element={<TodolistsList/>}/>\r\n                    <Route path = '/login' element={<Login/>}/>\r\n                    <Route path='/404' element={<h1>404: PAGE NOT FOUND</h1>} />\r\n                    <Route path='*' element={<Navigate to='/404'/>} />\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}